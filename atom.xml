<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[寒流‘s Blog]]></title>
  <subtitle><![CDATA[编程与生活]]></subtitle>
  <link href="/hexo-theme-icarus/atom.xml" rel="self"/>
  <link href="http://ppoffice.github.io/hexo-theme-icarus/"/>
  <updated>2015-11-30T02:23:39.000Z</updated>
  <id>http://ppoffice.github.io/hexo-theme-icarus/</id>
  
  <author>
    <name><![CDATA[Han Liu]]></name>
    <email><![CDATA[hanangellove@icloud.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[常用排序算法]]></title>
    <link href="http://ppoffice.github.io/hexo-theme-icarus/2015/11/30/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://ppoffice.github.io/hexo-theme-icarus/2015/11/30/常用排序算法/</id>
    <published>2015-11-30T02:02:57.000Z</published>
    <updated>2015-11-30T02:23:39.000Z</updated>
    <content type="html"><![CDATA[<p>在此总结一下常用排序算法的代码实现</p>
<p><code>#include &lt;iostream&gt;</code><br><code>using namespace std;</code><br><code>typedef int ElemType;</code></p>
<p>/*<br>1、插入排序<br>（1）直接插入排序算法<br>算法思想：将等排序列划分为有序与无序两部分，然后再依次将无序部分插入到已经有序的部分，最后 </p>
<p>就可以形成有序序列。<br>操作步骤如下：<br>1）查找出元素L（i）在表中的插入位置K；<br>2）将表中的第K个元素之前的元素依次后移一个位置；<br>3）将L（i）复制到L（K）。<br> */<br>时间复杂度为：O(n^2) </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void InsertSort(ElemType arr[], int length)  &#10;&#123;  &#10;    int i, j;  &#10;    ElemType guard; // &#21736;&#20853;  &#10;  &#10; for (i = 1; i \&#60; length; ++i)  &#10; &#123;  &#10;   if (arr[i]() \&#60; arr[i-1]()) // &#22312;&#26080;&#24207;&#37096;&#20998;&#23547;&#25214;&#19968;&#20010;&#20803;&#32032;&#65292;&#20351;&#20043;&#25554;&#20837;&#21040;&#26377;&#24207;&#37096;&#20998;&#21518;&#20173;&#28982;&#26377;&#24207;  &#10; &#9;&#123;  &#10;&#9;guard = arr[i]();// &#22797;&#21046;&#21040;&#8220;&#21736;&#20853;&#8221;  &#10;&#9;// &#23558;&#31532;i&#20010;&#20803;&#32032;&#20043;&#21069;&#30340;&#20803;&#32032;&#20381;&#27425;&#21518;&#31227;&#19968;&#20010;&#20301;&#32622;  &#10;&#9;for (j = i - 1; arr[j]() \&#62; guard; j--)  &#10;&#9;&#123;  &#10;&#9;&#9;arr[j + 1]() = arr[j]();  &#10;&#9;&#125;  &#10;&#10;&#9;arr[j + 1]() = guard; // &#22797;&#21046;&#21040;&#25554;&#20837;&#20301;&#32622;  &#10;&#9;&#125;  &#10;  &#125;  &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>2、折半插入排序<br>  使用于排序表为顺序存储的线性表<br>  在查找插入位置时，采用折半查找<br>  算法思想是：<br>  1）设置折半查找范围；<br>  2）折半查找<br>  3）移动元素<br>  4）插入元素<br>  5）继续操作1）、2）、3）、4）步，直到表成有序。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void BinaryInsertSort(ElemType arr[], int length)  &#10;&#123;  &#10;    int i, j, low, high, mid;  &#10;    ElemType tmp;  &#10;  &#10;for ( i = 1; i \&#60; length; ++i )  &#10;&#123;  &#10;tmp = arr[i](); // &#22797;&#21046;&#21040;&#21736;&#20853;  &#10;// &#35774;&#32622;&#25240;&#21322;&#26597;&#25214;&#33539;&#22260;  &#10;low = 0;        &#10;high = i;  &#10;&#10;while (low \&#60;= high) // &#25240;&#21322;&#26597;&#25214;  &#10;&#123;  &#10;mid = (low + high) / 2;  &#10;&#10;if (arr[mid]() \&#62; tmp) // &#22312;&#24038;&#21322;&#37096;&#20998;&#26597;&#25214;  &#10;&#123;  &#10;high = mid - 1;  &#10;&#125;  &#10;else  &#10;&#123;  &#10;low = mid + 1; // &#22312;&#21491;&#21322;&#37096;&#20998;&#26597;&#25214;  &#10;&#125;  &#10;&#125;  &#10;&#10;// &#31227;&#21160;&#20803;&#32032;  &#10;for ( j = i - 1; j \&#62;= high + 1; --j )  &#10;&#123;  &#10;arr[j + 1]() = arr[j]();  &#10;&#125;  &#10;&#10;arr[j + 1]() = tmp;  &#10;&#125;  &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>/*<br>3、希尔(Shell)排序<br>   基本思想：<br>   先将待排序的表分割成若干个形若L[i, i+d, i+2d, …, i+kd]的“特殊”子表，分别进行直接插入排序，<br>   当整个表已呈“基本有序”时，再对全体记录进行一次直接插入排序。<br>   算法过程：<br>   1）先取一个小于n的步长d1,把表中全部记录分成d1个组，所有距离为d1的倍数的记录放在同一组中，在各<br>  组中进行直接插入排序；<br>   2）然后取第二个步长d2 \&lt; d1, 重复步骤1<br>   3）直到dk = 1，再进行最后一次直接插入排序<br>*/  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void ShellSort(ElemType arr[], int length)  &#10;&#123;  &#10;    int i, j, dk = length / 2;  &#10;    ElemType tmp;  &#10;  &#10; while (dk \&#62;= 1)// &#25511;&#21046;&#27493;&#38271;  &#10;&#123;  &#10;&#9;for (i = dk; i \&#60; length; ++i)  &#10;&#9;&#123;  &#10;&#9;if (arr[i]() \&#60; arr[i - dk]())  &#10;&#9; &#123;  &#10;&#9;&#9;tmp = arr[i](); // &#26242;&#23384;  &#10;&#10;&#9;&#9;// &#21518;&#31227;  &#10;&#9;&#9;for (j = i - dk; j \&#62;= 0 &#38;&#38; tmp \&#60; arr[j](); j -= dk)  &#10;&#9;&#9;&#123;  &#10;&#9;&#9;arr[j + dk]() = arr[j]();  &#10;&#9;&#9;&#125;  &#10;&#10;&#9;&#9;arr[j + dk]() = tmp;  &#10;&#9;&#9;&#125;  &#10;&#9;&#125;  &#10;&#10;&#9;dk /= 2;  &#10;&#9;&#125;  &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>*<br>4、冒泡排序算法<br>   基本思想：<br>   假设待排序的表长为n， 从后向前或从前向后两两比较相邻元素的值，若为逆序，则交换之，直到序列比较完。<br>   这样一回就称为一趟冒泡。这样值较大的元素往下“沉”，而值较小的元素入上“浮”。<br>   时间复杂度为O(n^2)<br>*/ </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void BubbleSort(ElemType arr[], int length)  &#10;&#123;  &#10;    int i, j;  &#10;    ElemType tmp;  &#10;   for (i = 0; i \&#60; length - 1; ++i)// &#36255;&#27425;  &#10;&#123;  &#10;for (j = i + 1; j \&#60; length; ++j)  &#10;&#123;  &#10;if (arr[i]() \&#62; arr[j]())  &#10;   &#123;  &#10;tmp = arr[i]();  &#10;arr[i]() = arr[j]();  &#10;arr[j]() = tmp;  &#10;&#125;  &#10;&#125;  &#10;&#125;  &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>/*<br>5、快速排序算法<br>   基本思想：基于分治法，在待排序的n个元素中任取一个元素pivot作为基准，通过一趟排序将待排序表划分为独立的<br>   两部分L[1..k-1]和L[k+1 .. n],使得第一部分中的所有元素值都小于pivot，而第二部分中的所有元素值都大于pivot，<br>   则基准元素放在了其最终位置L（K）上，这个过程为一趟快速排序。而后分别递归地对两个子表重复上述过程，直到每<br>   部分内只有一个元素或为空为止，即所有元素都放在了其最终位置上。<br>*/ </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Partition(ElemType arr[], int left, int right)  &#10;&#123;  &#10;    ElemType pivot = arr[left]; // &#20197;&#24403;&#21069;&#34920;&#20013;&#31532;&#19968;&#20010;&#20803;&#32032;&#20026;&#26530;&#36724;&#20540;  &#10;  &#10; while (left \&#60; right)  &#10;&#123;  &#10;// &#20174;&#21491;&#21521;&#24038;&#25214;&#19968;&#20010;&#27604;&#26530;&#36724;&#20540;&#23567;&#30340;&#20803;&#32032;&#30340;&#20301;&#32622;  &#10;while (left \&#60; right &#38;&#38; arr[right]() \&#62;= pivot)   &#10;&#123;  &#10;--right;  &#10;&#125;  &#10;&#10;arr[left]() = arr[right](); // &#23558;&#27604;&#26530;&#36724;&#20540;&#23567;&#30340;&#20803;&#32032;&#31227;&#21160;&#21040;&#24038;&#31471;  &#10;&#10;// &#20174;&#24038;&#21521;&#21491;&#26597;&#25214;&#27604;&#26530;&#36724;&#20540;&#22823;&#30340;&#20803;&#32032;&#30340;&#20301;&#32622;  &#10;while (left \&#60; right &#38;&#38; arr[left]() \&#60;= pivot)  &#10;&#123;  &#10;++left;   &#10;&#125;  &#10;&#10;   arr[right]() = arr[left]();// &#23558;&#27604;&#26530;&#36724;&#20540;&#22823;&#30340;&#20803;&#32032;&#31227;&#21160;&#21040;&#21491;&#31471;  &#10;&#125;  &#10;&#10;arr[left]() = pivot; // &#23558;&#26530;&#36724;&#20803;&#32032;&#25918;&#22312;&#26368;&#32456;&#20301;&#32622;  &#10;&#10;return left;  &#10;&#125;  &#10;  &#10;void QuickSort(ElemType arr[], int left, int right)  &#10;&#123;  &#10;    if (left \&#60; right)  &#10;    &#123;  &#10;        int pivotPos = Partition(arr, left, right); // &#21010;&#20998;  &#10;        QuickSort(arr, left, pivotPos - 1); // &#24555;&#36895;&#25490;&#24207;&#24038;&#21322;&#37096;&#20998;  &#10;        QuickSort(arr, pivotPos + 1, right); // &#24555;&#36895;&#25490;&#24207;&#21491;&#21322;&#37096;&#20998;  &#10;    &#125;  &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>/*<br>6、简单选择排序算法<br>   基本思想：<br>   假设排序表为L[1…n],第i趟排序从表中选择关键字最小的元素与Li交换，第一趟排序可以确定一个元素的<br>   最终位置，这样经过n-1趟排序就可以使得整个排序表有序。<br>*/  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void SelectSort(ElemType arr[], int length)  &#10;&#123;  &#10;    int i, j, min;  &#10;    ElemType tmp;  &#10;  &#10; for (i = 0; i \&#60; length - 1; ++i) // &#38656;&#35201;n-1&#36255;  &#10;&#123;  &#10;min = i;  &#10;&#10;for (j = i + 1; j \&#60; length; ++j)  &#10;&#123;  &#10;if (arr[j]() \&#60; arr[min]()) // &#27599;&#19968;&#36255;&#36873;&#25321;&#20803;&#32032;&#20540;&#26368;&#23567;&#30340;&#19979;&#26631;  &#10;&#123;  &#10;min = j;  &#10;&#125;  &#10;&#125;  &#10;&#10;if (min != i) // &#22914;&#26524;&#31532;i&#36255;&#30340;Li&#20803;&#32032;&#20540;&#35813;&#36255;&#25214;&#21040;&#30340;&#26368;&#23567;&#20803;&#32032;&#20540;&#65292;&#21017;&#20132;&#25442;&#65292;&#20197;&#20351;Li&#20540;&#26368;&#23567;  &#9; &#123;  &#10;tmp = arr[i]();  &#10;arr[i]() = arr[min]();  &#10;arr[min]() = tmp;  &#10;&#125;  &#10;&#125;  &#10;&#125;</span><br></pre></td></tr></table></figure>
<p>/*<br>7、堆排序算法<br> 堆的定义如下：n个关键字序列号L<a href="">1..n</a>称为堆，仅当该序列满足：<br>1）L(i) \&lt;= L(2i)且L(i) \&lt;= L(2i+1) 或 2)L(i) >= L(2i)且L(i) >= L(2i+1)<br>满足第一种情况的堆，称为小根堆（小顶堆）；<br>满足第二种情况的堆，称为大根堆（大顶堆）。<br>*/ </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void HeapAdjust(ElemType \*a,int i,int size)  //&#35843;&#25972;&#22534;  &#10;&#123;  &#10;    int lchild = 2 \* i;       //i&#30340;&#24038;&#23401;&#23376;&#33410;&#28857;&#24207;&#21495;  &#10;    int rchild = 2 \* i + 1;     //i&#30340;&#21491;&#23401;&#23376;&#33410;&#28857;&#24207;&#21495;  &#10;    int max = i;            //&#20020;&#26102;&#21464;&#37327;  &#10;   if(i \&#60;= size / 2)          //&#22914;&#26524;i&#26159;&#21494;&#33410;&#28857;&#23601;&#19981;&#29992;&#36827;&#34892;&#35843;&#25972;   &#10;&#123;  &#10;if (lchild \&#60;= size &#38;&#38; a[lchild]() \&#62; a[max]())  &#10;&#123;  &#10;max = lchild; // &#24038;&#23401;&#23376;&#27604;&#21452;&#20146;&#20540;&#36824;&#22823;&#65292;&#38656;&#35201;&#35843;&#25972;  &#10;&#125;    &#10;&#10;if (rchild \&#60;= size &#38;&#38; a[rchild]() \&#62; a[max]())  &#10;&#123;  &#10;max = rchild;// &#21491;&#23401;&#23376;&#27604;&#21452;&#20146;&#20540;&#36824;&#22823;&#65292;&#38656;&#35201;&#35843;&#25972;  &#10;&#125;  &#10;&#10;if (max != i) // &#38656;&#35201;&#35843;&#25972;  &#10;&#123;  &#10;ElemType tmp = a[max]();  &#10;a[max]() = a[i]();  &#10;a[i]() = tmp;  &#10;&#10;HeapAdjust(a, max, size);    //&#36991;&#20813;&#35843;&#25972;&#20043;&#21518;&#20197;max&#20026;&#29238;&#33410;&#28857;&#30340;&#23376;&#26641;&#19981;&#26159;&#22534;   &#10;&#125;  &#10;&#125;          &#10;&#125;  &#10;  &#10;void BuildHeap(ElemType \*a,int size)    //&#24314;&#31435;&#22534;  &#10;&#123;  &#10;    for (int i = size / 2; i \&#62;= 0; i--)    //&#38750;&#21494;&#33410;&#28857;&#26368;&#22823;&#24207;&#21495;&#20540;&#20026;size/2  &#10;    &#123;  &#10;        HeapAdjust(a, i, size);  &#10;    &#125;  &#10;&#125;  &#10;  &#10;void HeapSort(ElemType \*a, int size)    //&#22534;&#25490;&#24207;  &#10;&#123;  &#10;    BuildHeap(a,size);  &#10;  &#10;for(int i = size - 1; i \&#62;= 0; i--)  &#10;&#123;  &#10;swap(a[0](), a[i]());           //&#20132;&#25442;&#22534;&#39030;&#21644;&#26368;&#21518;&#19968;&#20010;&#20803;&#32032;&#65292;&#21363;&#27599;&#27425;&#23558;&#21097;&#20313;&#20803;&#32032;&#20013;&#30340;&#26368;&#22823;&#32773;&#25918;&#21040;&#26368;&#21518;&#38754;   &#10;BuildHeap(a, i-1);        //&#23558;&#20313;&#19979;&#20803;&#32032;&#37325;&#26032;&#24314;&#31435;&#20026;&#22823;&#39030;&#22534;   &#10;HeapAdjust(a,1,i-1);      //&#37325;&#26032;&#35843;&#25972;&#22534;&#39030;&#33410;&#28857;&#25104;&#20026;&#22823;&#39030;&#22534;  &#10;&#125;  &#10;&#125;  &#10;  &#10;void Display(ElemType arr[], int length)  &#10;&#123;  &#10;    for ( int i = 0; i \&#60; length; ++i )  &#10;    &#123;  &#10;        cout \&#60;\&#60; arr[i] \&#60;\&#60; &#34; &#34;;  &#10;    &#125;  &#10;  &#10; cout \&#60;\&#60; endl;  &#10;&#125;  &#10;int main()  &#10;&#123;  &#10;    ElemType arr[] = &#123;2, 1, 5, 3, 4, 0, 6, 9, -1, 4, 12&#125;;  &#10;  &#10;//InsertSort(arr, sizeof(arr) / sizeof(ElemType));  &#10;//BinaryInsertSort(arr, sizeof(arr) / sizeof(ElemType));  &#10;//ShellSort(arr, sizeof(arr) / sizeof(ElemType));  &#10;//BubbleSort(arr, sizeof(arr) / sizeof(ElemType));  &#10;//QuickSort(arr, 0,  sizeof(arr) / sizeof(ElemType) - 1);  &#10;HeapSort(arr, sizeof(arr) / sizeof(ElemType));  &#10;Display(arr, sizeof(arr) / sizeof(ElemType));  &#10;&#10;return 0;  &#10;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在此总结一下常用排序算法的代码实现</p>
<p><code>#include &lt;iostream&gt;</code><br><code>using namespace std;</code><br><code>typedef int ElemType;</code]]>
    </summary>
    
      <category term="算法" scheme="http://ppoffice.github.io/hexo-theme-icarus/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://ppoffice.github.io/hexo-theme-icarus/2015/11/29/hello-world/"/>
    <id>http://ppoffice.github.io/hexo-theme-icarus/2015/11/29/hello-world/</id>
    <published>2015-11-29T14:07:27.000Z</published>
    <updated>2015-11-29T14:07:27.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
